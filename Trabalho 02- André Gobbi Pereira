https://github.com/kioia44/PYTHON.git

1. Crie uma função que receba uma lista de números e retorne uma lista contendo apenas os números ímpares.

def numeros_impares(lista):
    return [num for num in lista if num % 2 != 0]



2. Escreva uma função que receba uma lista e retorne uma nova lista com o dobro de cada elemento.
```
 
 
```



def dobrar_elementos(lista):
    return [num * 2 for num in lista]


3. Faça uma função que receba uma lista e retorne uma lista sem duplicatas.

def remover_duplicatas(lista):
    return list(set(lista))



4. Crie uma função que receba uma lista e um valor divisor e retorne uma lista dos elementos que são divisíveis pelo divisor.

def divisiveis_por(lista, divisor):
    return [num for num in lista if num % divisor == 0]


5. Escreva uma função que receba duas listas e retorne um conjunto com os elementos que aparecem em ambas.

def interseccao_listas(lista1, lista2):
    return set(lista1) & set(lista2)


6. Crie uma função que receba uma lista e retorne uma nova lista com os elementos em ordem inversa.

def ordem_inversa(lista):
    return lista[::-1]


7. Escreva uma função que receba uma lista de números e retorne uma lista contendo o quadrado de cada número.

def quadrado_numeros(lista):
    return [num ** 2 for num in lista]


8. Crie uma função que receba uma lista e um valor, e retorne uma lista com os elementos maiores que esse valor.

def maiores_que(lista, valor):
    return [num for num in lista if num > valor]


9. Escreva uma função que receba duas listas e retorne uma lista dos elementos que estão em apenas uma das listas.

def diferenca_simetrica(lista1, lista2):
    return list(set(lista1) ^ set(lista2))


10. Faça uma função que receba uma lista e retorne um conjunto dos elementos únicos.

def elementos_unicos(lista):
    return set(lista)


11. Crie uma função que receba duas listas e retorne uma lista dos elementos únicos que estão em ambas.

def unicos_em_ambas(lista1, lista2):
    return list(set(lista1) & set(lista2))


12. Escreva uma função que receba uma lista e retorne uma lista contendo os elementos que aparecem mais de uma vez.

def elementos_repetidos(lista):
    return [item for item in set(lista) if lista.count(item) > 1]


13. Faça uma função que receba uma lista de números e retorne uma lista dos números pares.

def numeros_pares(lista):
    return [num for num in lista if num % 2 == 0]


14. Escreva uma função que receba uma lista de números e um valor, e retorne uma lista com os índices dos elementos maiores que o valor.

def indices_maiores_que(lista, valor):
    return [i for i, num in enumerate(lista) if num > valor]


15. Crie uma função que receba uma lista de strings e retorne uma lista com o tamanho de cada string.

def tamanho_strings(lista):
    return [len(string) for string in lista]


16. Escreva uma função que receba uma lista de números e retorne uma lista contendo cada número elevado ao cubo.

def cubo_numeros(lista):
    return [num ** 3 for num in lista]


17. Crie uma função que receba uma lista e retorne uma lista de todos os elementos únicos.

def todos_unicos(lista):
    return list(set(lista))


18. Escreva uma função que receba uma lista de strings e retorne uma lista contendo as strings que começam com uma letra maiúscula.

def strings_inicial_maiuscula(lista):
    return [s for s in lista if s[0].isupper()]


19. Faça uma função que receba uma lista de números e retorne uma lista contendo apenas os múltiplos de 3.

def multiplos_de_tres(lista):
    return [num for num in lista if num % 3 == 0]


20. Escreva uma função que receba duas listas e retorne uma lista com a interseção ordenada de forma crescente entre elas.

def intersecao_ordenada(lista1, lista2):
    return sorted(set(lista1) & set(lista2))
